Index: Projeto-Teste-BlocoDeNotas/src/main/java/org/Main/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.Main;\r\n\r\n\r\nimport Veiculo.*;\r\nimport com.google.maps.*;\r\nimport com.google.maps.model.*;\r\n\r\n\r\nimport java.io.*;\r\nimport java.util.Scanner;\r\nimport java.text.DecimalFormat;\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n\r\n        Scanner scanner = new Scanner(System.in);\r\n        // Inicialização do contexto da API do Google Maps com a chave de autenticação\r\n        GeoApiContext contexto = new GeoApiContext.Builder().apiKey(\"AIzaSyDbyxgnL0gIjRLqjZFImKWlQHLgF2D08ms\").build();\r\n        while (true){\r\n\r\n            System.out.println(\"Escolha uma opção:\");\r\n            System.out.println(\"1. Consultar trechos e modalidades.\");\r\n            System.out.println(\"2. Cadastrar transporte\");\r\n            System.out.println(\"3. Consulta de estatística.\");\r\n            System.out.println(\"4. Sair\");\r\n\r\n            int opcao = scanner.nextInt();\r\n            scanner.nextLine();\r\n        switch (opcao) {\r\n\r\n            case 1:\r\n\r\n            try {\r\n                // Lê os nomes das cidades a partir de um arquivo CSV\r\n                String[] cidadesDisponíveis = lerNomesCidadesDoCSV(\"Projeto-Teste-BlocoDeNotas/DistanciasCidadesCSV.csv\");\r\n\r\n                // Exibe as cidades disponíveis para o usuário\r\n                System.out.println(\"Cidades disponíveis:\");\r\n                for (String cidade : cidadesDisponíveis) {\r\n                    System.out.println(cidade);\r\n                }\r\n\r\n                // Solicita ao usuário que selecione as cidades de origem e destino\r\n                System.out.print(\"Selecione a primeira cidade: \");\r\n                String cidadeOrigem = scanner.nextLine();\r\n                System.out.print(\"Selecione a segunda cidade: \");\r\n                String cidadeDestino = scanner.nextLine();\r\n\r\n                // Cria uma requisição à API do Google Maps para calcular a distância entre as cidades\r\n                DistanceMatrixApiRequest requisicao = DistanceMatrixApi.newRequest(contexto);\r\n                DistanceMatrix matrizDistancia = requisicao.origins(cidadeOrigem)\r\n                        .destinations(cidadeDestino)\r\n                        .await();\r\n\r\n                // Obtém a distância entre as cidades e a exibe de forma legível\r\n                Distance distancia = matrizDistancia.rows[0].elements[0].distance;\r\n                System.out.println(\"Distância entre \" + cidadeOrigem + \" e \" + cidadeDestino + \": \" + distancia.humanReadable);\r\n\r\n                System.out.println(\"Agora, vamos calcular o custo da viagem:\");\r\n\r\n                // Solicita ao usuário que selecione o tamanho do caminhão\r\n                System.out.println(\"Selecione o tamanho do caminhão: \");\r\n                System.out.println(\"1 - Pequeno\");\r\n                System.out.println(\"2 - Médio\");\r\n                System.out.println(\"3 - Grande\");\r\n                int opcaoTamanho = scanner.nextInt();\r\n\r\n                TamanhoVeiculo tamanhoVeiculoSelecionado = TamanhoVeiculo.PEQUENO; // Tamanho padrão (pequeno)\r\n\r\n                switch (opcaoTamanho) {\r\n                    case 1:\r\n                        tamanhoVeiculoSelecionado = TamanhoVeiculo.PEQUENO;\r\n                        break;\r\n                    case 2:\r\n                        tamanhoVeiculoSelecionado = TamanhoVeiculo.MEDIO;\r\n                        break;\r\n                    case 3:\r\n                        tamanhoVeiculoSelecionado = TamanhoVeiculo.GRANDE;\r\n                        break;\r\n                    default:\r\n                        System.out.println(\"Opção inválida. Usando caminhão pequeno por padrão.\");\r\n                }\r\n\r\n                // Converte a distância da viagem de metros para quilômetros\r\n                double distanciaViagem = distancia.inMeters / 1000.0;\r\n\r\n                // Cria um objeto de caminhão com base no tamanho selecionado\r\n                Caminhao caminhao = criarVeiculo(tamanhoVeiculoSelecionado);\r\n\r\n                // Calcula o custo da viagem\r\n                double custo = caminhao.getPrecoPorKm() * distanciaViagem;\r\n\r\n                // Formata o custo como valor em Reais (R$) com duas casas decimais\r\n                DecimalFormat df = new DecimalFormat(\"###,###.00\");\r\n                String valorFormatado = \"R$\" + df.format(custo);\r\n\r\n                // Exibe o custo da viagem com o tamanho do caminhão selecionado\r\n                System.out.println(\"Custo da viagem com caminhão \" + tamanhoVeiculoSelecionado + \": \" + valorFormatado);\r\n\r\n            }\r\n            catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n                break;\r\n            case 2:\r\n                break;\r\n            case 3:\r\n                break;\r\n            case 4:\r\n                System.out.println(\"Encerrando o programa.\");\r\n                scanner.close();\r\n                System.exit(0);\r\n                break;\r\n            default:\r\n                System.out.println(\"Opção inválida. Tente novamente.\\n\");\r\n\r\n\r\n\r\n        }\r\n        }\r\n    }\r\n    //##########################DESTA LINHA PRA BAIXO NÃO ESTÁ DIRETAMENTE LIGADO AO PROGRAMA.##########################\r\n    // Função para ler os nomes das cidades a partir de um arquivo CSV\r\n    private static String[] lerNomesCidadesDoCSV(String caminhoArquivoCSV) throws IOException {\r\n        String[] cidades = null;\r\n        try (BufferedReader leitor = new BufferedReader(new FileReader(caminhoArquivoCSV))) {\r\n            String linha;\r\n            if ((linha = leitor.readLine()) != null) {\r\n                // Divide a linha do arquivo CSV em nomes de cidades usando ';' como delimitador\r\n                cidades = linha.split(\";\");\r\n            }\r\n        }\r\n        return cidades;\r\n    }\r\n\r\n    // Função para criar um objeto de caminhão com base no tamanho selecionado\r\n    private static Caminhao criarVeiculo(TamanhoVeiculo tamanhoVeiculo) {\r\n        switch (tamanhoVeiculo) {\r\n            case PEQUENO:\r\n                return new CaminhaoPequeno();\r\n            case MEDIO:\r\n                return new CaminhaoMedio();\r\n            case GRANDE:\r\n                return new CaminhaoGrande();\r\n            default:\r\n                return new CaminhaoPequeno(); // Usando caminhão pequeno por padrão.\r\n        }\r\n    }\r\n}
===================================================================
diff --git a/Projeto-Teste-BlocoDeNotas/src/main/java/org/Main/Main.java b/Projeto-Teste-BlocoDeNotas/src/main/java/org/Main/Main.java
--- a/Projeto-Teste-BlocoDeNotas/src/main/java/org/Main/Main.java	
+++ b/Projeto-Teste-BlocoDeNotas/src/main/java/org/Main/Main.java	
@@ -10,116 +10,84 @@
 import java.util.Scanner;
 import java.text.DecimalFormat;
 public class Main {
-
     public static void main(String[] args) {
-
-        Scanner scanner = new Scanner(System.in);
         // Inicialização do contexto da API do Google Maps com a chave de autenticação
         GeoApiContext contexto = new GeoApiContext.Builder().apiKey("AIzaSyDbyxgnL0gIjRLqjZFImKWlQHLgF2D08ms").build();
-        while (true){
-
-            System.out.println("Escolha uma opção:");
-            System.out.println("1. Consultar trechos e modalidades.");
-            System.out.println("2. Cadastrar transporte");
-            System.out.println("3. Consulta de estatística.");
-            System.out.println("4. Sair");
-
-            int opcao = scanner.nextInt();
-            scanner.nextLine();
-        switch (opcao) {
-
-            case 1:
 
-            try {
-                // Lê os nomes das cidades a partir de um arquivo CSV
-                String[] cidadesDisponíveis = lerNomesCidadesDoCSV("Projeto-Teste-BlocoDeNotas/DistanciasCidadesCSV.csv");
+        try {
+            // Lê os nomes das cidades a partir de um arquivo CSV
+            String[] cidadesDisponíveis = lerNomesCidadesDoCSV("Projeto-Teste-BlocoDeNotas/DistanciasCidadesCSV.csv");
 
-                // Exibe as cidades disponíveis para o usuário
-                System.out.println("Cidades disponíveis:");
-                for (String cidade : cidadesDisponíveis) {
-                    System.out.println(cidade);
-                }
+            // Exibe as cidades disponíveis para o usuário
+            System.out.println("Cidades disponíveis:");
+            for (String cidade : cidadesDisponíveis) {
+                System.out.println(cidade);
+            }
 
-                // Solicita ao usuário que selecione as cidades de origem e destino
-                System.out.print("Selecione a primeira cidade: ");
-                String cidadeOrigem = scanner.nextLine();
-                System.out.print("Selecione a segunda cidade: ");
-                String cidadeDestino = scanner.nextLine();
+            Scanner scanner = new Scanner(System.in);
+
+            // Solicita ao usuário que selecione as cidades de origem e destino
+            System.out.print("Selecione a primeira cidade: ");
+            String cidadeOrigem = scanner.nextLine();
+            System.out.print("Selecione a segunda cidade: ");
+            String cidadeDestino = scanner.nextLine();
 
-                // Cria uma requisição à API do Google Maps para calcular a distância entre as cidades
-                DistanceMatrixApiRequest requisicao = DistanceMatrixApi.newRequest(contexto);
-                DistanceMatrix matrizDistancia = requisicao.origins(cidadeOrigem)
-                        .destinations(cidadeDestino)
-                        .await();
+            // Cria uma requisição à API do Google Maps para calcular a distância entre as cidades
+            DistanceMatrixApiRequest requisicao = DistanceMatrixApi.newRequest(contexto);
+            DistanceMatrix matrizDistancia = requisicao.origins(cidadeOrigem)
+                    .destinations(cidadeDestino)
+                    .await();
 
-                // Obtém a distância entre as cidades e a exibe de forma legível
-                Distance distancia = matrizDistancia.rows[0].elements[0].distance;
-                System.out.println("Distância entre " + cidadeOrigem + " e " + cidadeDestino + ": " + distancia.humanReadable);
+            // Obtém a distância entre as cidades e a exibe de forma legível
+            Distance distancia = matrizDistancia.rows[0].elements[0].distance;
+            System.out.println("Distância entre " + cidadeOrigem + " e " + cidadeDestino + ": " + distancia.humanReadable);
 
-                System.out.println("Agora, vamos calcular o custo da viagem:");
+            System.out.println("Agora, vamos calcular o custo da viagem:");
 
-                // Solicita ao usuário que selecione o tamanho do caminhão
-                System.out.println("Selecione o tamanho do caminhão: ");
-                System.out.println("1 - Pequeno");
-                System.out.println("2 - Médio");
-                System.out.println("3 - Grande");
-                int opcaoTamanho = scanner.nextInt();
+            // Solicita ao usuário que selecione o tamanho do caminhão
+            System.out.println("Selecione o tamanho do caminhão: ");
+            System.out.println("1 - Pequeno");
+            System.out.println("2 - Médio");
+            System.out.println("3 - Grande");
+            int opcaoTamanho = scanner.nextInt();
 
-                TamanhoVeiculo tamanhoVeiculoSelecionado = TamanhoVeiculo.PEQUENO; // Tamanho padrão (pequeno)
+            TamanhoVeiculo tamanhoVeiculoSelecionado = TamanhoVeiculo.PEQUENO; // Tamanho padrão (pequeno)
 
-                switch (opcaoTamanho) {
-                    case 1:
-                        tamanhoVeiculoSelecionado = TamanhoVeiculo.PEQUENO;
-                        break;
-                    case 2:
-                        tamanhoVeiculoSelecionado = TamanhoVeiculo.MEDIO;
-                        break;
-                    case 3:
-                        tamanhoVeiculoSelecionado = TamanhoVeiculo.GRANDE;
-                        break;
-                    default:
-                        System.out.println("Opção inválida. Usando caminhão pequeno por padrão.");
-                }
+            switch (opcaoTamanho) {
+                case 1:
+                    tamanhoVeiculoSelecionado = TamanhoVeiculo.PEQUENO;
+                    break;
+                case 2:
+                    tamanhoVeiculoSelecionado = TamanhoVeiculo.MEDIO;
+                    break;
+                case 3:
+                    tamanhoVeiculoSelecionado = TamanhoVeiculo.GRANDE;
+                    break;
+                default:
+                    System.out.println("Opção inválida. Usando caminhão pequeno por padrão.");
+            }
 
-                // Converte a distância da viagem de metros para quilômetros
-                double distanciaViagem = distancia.inMeters / 1000.0;
+            // Converte a distância da viagem de metros para quilômetros
+            double distanciaViagem = distancia.inMeters / 1000.0;
 
-                // Cria um objeto de caminhão com base no tamanho selecionado
-                Caminhao caminhao = criarVeiculo(tamanhoVeiculoSelecionado);
+            // Cria um objeto de caminhão com base no tamanho selecionado
+            Caminhao caminhao = criarVeiculo(tamanhoVeiculoSelecionado);
 
-                // Calcula o custo da viagem
-                double custo = caminhao.getPrecoPorKm() * distanciaViagem;
+            // Calcula o custo da viagem
+            double custo = caminhao.getPrecoPorKm() * distanciaViagem;
 
-                // Formata o custo como valor em Reais (R$) com duas casas decimais
-                DecimalFormat df = new DecimalFormat("###,###.00");
-                String valorFormatado = "R$" + df.format(custo);
+            // Formata o custo como valor em Reais (R$) com duas casas decimais
+            DecimalFormat df = new DecimalFormat("###,###.00");
+            String valorFormatado = "R$" + df.format(custo);
 
-                // Exibe o custo da viagem com o tamanho do caminhão selecionado
-                System.out.println("Custo da viagem com caminhão " + tamanhoVeiculoSelecionado + ": " + valorFormatado);
+            // Exibe o custo da viagem com o tamanho do caminhão selecionado
+            System.out.println("Custo da viagem com caminhão " + tamanhoVeiculoSelecionado + ": " + valorFormatado);
 
-            }
-            catch (Exception e) {
-                e.printStackTrace();
-            }
-                break;
-            case 2:
-                break;
-            case 3:
-                break;
-            case 4:
-                System.out.println("Encerrando o programa.");
-                scanner.close();
-                System.exit(0);
-                break;
-            default:
-                System.out.println("Opção inválida. Tente novamente.\n");
-
-
-
+        } catch (Exception e) {
+            e.printStackTrace();
         }
-        }
     }
-    //##########################DESTA LINHA PRA BAIXO NÃO ESTÁ DIRETAMENTE LIGADO AO PROGRAMA.##########################
+
     // Função para ler os nomes das cidades a partir de um arquivo CSV
     private static String[] lerNomesCidadesDoCSV(String caminhoArquivoCSV) throws IOException {
         String[] cidades = null;
